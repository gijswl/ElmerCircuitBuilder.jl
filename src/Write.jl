
format_source(name::String) = name * "_Source"

function write_circuits(circuits::Vector{Circuit}, filename::String; path="")
    open(joinpath(path, filename), "w") do file
        write_circuits(file, circuits)
    end
end

function write_circuits(io::IO, circuits::Vector{Circuit})
    Bmat = Dict()
    Amat = Dict()
    svec = Dict()
    unknowns = Dict()

    for c ∈ circuits
        B, A, src = get_tableau_matrix(c)
        Bmat[c.index] = B
        Amat[c.index] = A
        svec[c.index] = src
        unknowns[c.index] = get_unknown_names(c)
    end

    write_header(io, length(circuits))

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! Matrix Size Declaration and Matrix Initialization")
    println(io, "! -----------------------------------------------------------------------------")
    for c ∈ circuits
        write_matrix_init(io, c, length(svec[c.index]))
    end

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! Dof/Unknown Vector Definition")
    println(io, "! -----------------------------------------------------------------------------")
    for c ∈ circuits
        write_unknowns(io, c, unknowns[c.index])
    end

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! Source Vector Definition")
    println(io, "! -----------------------------------------------------------------------------")
    for c ∈ circuits
        write_source_vector(io, c, svec[c.index])
    end

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! KCL Equations")
    println(io, "! -----------------------------------------------------------------------------")
    for c ∈ circuits
        write_kcl_equations(io, c, Bmat[c.index], Amat[c.index])
    end

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! KVL Equations")
    println(io, "! -----------------------------------------------------------------------------")
    for c ∈ circuits
        write_kvl_equations(io, c, Bmat[c.index], Amat[c.index])
    end

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! Component Equations")
    println(io, "! -----------------------------------------------------------------------------")
    for c ∈ circuits
        write_component_equations(io, c, Bmat[c.index], Amat[c.index])
    end
end

function write_header(io::IO, num_circuits::Int)
    date = format(now(), "yyyy/mm/dd HH:MM:SS")

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! Circuit generated by ElmerCircuitBuilder.jl on $date")
    println(io, "! -----------------------------------------------------------------------------")
    println(io, "")

    println(io, "! -----------------------------------------------------------------------------")
    println(io, "! Number of Circuits in Model")
    println(io, "! -----------------------------------------------------------------------------")
    println(io, "\$ Circuits = $num_circuits")
    println(io, "")
end

function write_matrix_init(io::IO, c::Circuit, num_var::Int)
    println(io, "\$ C.", c.index, ".variables = $num_var")
    println(io, "\$ C.", c.index, ".perm = zeros($num_var)")
    println(io, "\$ C.", c.index, ".A = zeros($num_var, $num_var)")
    println(io, "\$ C.", c.index, ".B = zeros($num_var, $num_var)")
    println(io, "")
end

function write_unknowns(io::IO, c::Circuit, unknowns::Vector)
    for (i, unknown) ∈ enumerate(unknowns)
        println(io, "\$ C.", c.index, ".name.", i, " = \"", unknown, "\"")
    end

    println(io, "")
end

function write_source_vector(io::IO, c::Circuit, src::Vector)
    for (i, source) ∈ enumerate(src)
        if source != ""
            println(io, "\$ C.", c.index, ".source.", i, " = \"", format_source(source), "\"")
        end
    end

    println(io, "")
end

function write_kcl_equations(io::IO, c::Circuit, B::Matrix, A::Matrix)
    nnodes = get_nnodes(c) - 1

    rows = 1:nnodes
    for i ∈ rows, j ∈ 1:size(B, 2)
        value = B[i, j]
        value ≈ 0 && continue
        println(io, "\$ C.", c.index, ".B($(i-1), $(j-1)) = $value")
    end

    for i ∈ rows, j ∈ 1:size(A, 2)
        value = A[i, j]
        value ≈ 0 && continue
        println(io, "\$ C.", c.index, ".A($(i-1), $(j-1)) = $value")
    end

    println(io, "")
end

function write_kvl_equations(io::IO, c::Circuit, B::Matrix, A::Matrix)
    nnodes = get_nnodes(c) - 1
    nedges = get_nedges(c)

    rows = (1:nedges) .+ nnodes
    for i ∈ rows, j ∈ 1:size(B, 2)
        value = B[i, j]
        value ≈ 0 && continue
        println(io, "\$ C.", c.index, ".B($(i-1), $(j-1)) = $value")
    end

    for i ∈ rows, j ∈ 1:size(A, 2)
        value = A[i, j]
        value ≈ 0 && continue
        println(io, "\$ C.", c.index, ".A($(i-1), $(j-1)) = $value")
    end

    println(io, "")
end

function write_component_equations(io::IO, c::Circuit, B::Matrix, A::Matrix)
    nnodes = get_nnodes(c) - 1
    nedges = get_nedges(c)

    rows = (1:nedges) .+ (nnodes + nedges)
    for i ∈ rows, j ∈ 1:size(B, 2)
        value = B[i, j]
        value ≈ 0 && continue
        println(io, "\$ C.", c.index, ".B($(i-1), $(j-1)) = $value")
    end

    for i ∈ rows, j ∈ 1:size(A, 2)
        value = A[i, j]
        value ≈ 0 && continue
        println(io, "\$ C.", c.index, ".A($(i-1), $(j-1)) = $value")
    end

    println(io, "")
end
